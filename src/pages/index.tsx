/* eslint-disable @next/next/no-img-element */
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState, useCallback } from "react";
import { Map, Marker, ZoomControl } from "pigeon-maps";
import { stamenToner } from "pigeon-maps/providers";
import debounce from "lodash.debounce";
import { DebounceInput } from "react-debounce-input";
import FoodIcons from "../components/FoodIcons";

function tiler(x: number, y: number, z: number, dpr?: number) {
  return `https://a.tile.openstreetmap.fr/hot/${z}/${x}/${y}.png`;
}

type Result = any | null;
type Results = Result[];

function getDevicePixelRatio() {
  return window.devicePixelRatio || 1;
}

const Home: NextPage = () => {
  const maxZoom = 14;

  const [toggle, setToggle] = useState(true);
  const [tab, setTab] = useState(0);
  const [foodQuery, setFoodQuery] = useState("");
  const [results, setResults] = useState<Results>([]);
  const [haveMoved, setHaveMoved] = useState(false);
  const [center, setCenter] = useState<[number, number]>([0, 0]);
  const [zoom, setZoom] = useState(maxZoom);
  const [location, setLocation] = useState<[number, number]>([
    40.7812, -73.9665,
  ]);
  const [locationQuery, setLocationQuery] = useState("");
  const [dprs, setDprs] = useState<number>(1);

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((e) => {
        setLocation([e.coords.latitude, e.coords.longitude]);
        setCenter([e.coords.latitude, e.coords.longitude]);
        search(`${e.coords.latitude}, ${e.coords.longitude}`, "");
      });
    } else {
      setLocation([40.7812, -73.9665]);
      setCenter([40.7812, -73.9665]);
      search("40.7812, -73.9665", "");
   }
  }, []);

  useEffect(() => {
    search(locationQuery, foodQuery)
  }, [locationQuery, foodQuery])

  function search(locationStr: string, foodStr: string) {
    fetch(
      `/api/search-area?q=${foodStr || "food"}&l=${
        locationStr || location[0] + "," + location[1]
      }`
    )
      .then((res) => {
        return res.json();
      })
      .then((res) => {
        console.log(res);
        setResults(res.businesses);
        setLocation([res.region.center.latitude, res.region.center.longitude]);
        setCenter([res.region.center.latitude, res.region.center.longitude]);
        setZoom(maxZoom);
      })
      .catch((err) => {
        console.log(err);
      });
  }

  function handleSelectLocation({
    event,
    latLng,
  }: {
    event: MouseEvent;
    latLng: [number, number];
  }) {
    setCenter(latLng);
    setLocation(latLng);
    setHaveMoved(false);
  }

  function handleMarkerClick({
    event,
    anchor,
  }: {
    event: MouseEvent;
    anchor: [number, number];
  }) {
    setCenter(anchor);
    //setLocation(anchor)
    setHaveMoved(true);
    setZoom(maxZoom);
  }

  return (
    <>
      <Head>
        <title>Where Should I Eat?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        style={{ backgroundBlendMode: toggle ? "darken" : "" }}
        className="relative flex h-full w-full flex-col items-center justify-center  bg-stone-700"
      >
        {/*TINDER*/}
        <div className="relative h-full w-full flex items-center flex-col justify-center">
          <div className="h-screen w-full flex items-center justify-center ">
            <Map
              provider={tiler}
              defaultCenter={[40.7812, -73.9665]}
              center={
                results && results[0]
                  ? [
                      results[0].coordinates.latitude,
                      results[0].coordinates.longitude,
                    ]
                  : center
              }
              zoom={zoom}
              maxZoom={maxZoom + 3}
              onClick={handleSelectLocation}
              onBoundsChanged={({ center, zoom }) => {
                setZoom(zoom);
                setCenter(center);
                setHaveMoved(true);
              }}
            >
              {results &&
                results.map((result) => (
                  <Marker
                    key={result.id}
                    width={50}
                    anchor={[
                      result.coordinates.latitude,
                      result.coordinates.longitude,
                    ]}
                    onClick={handleMarkerClick}
                  />
                ))}
            </Map>
          </div>
          {(results &&
              !toggle && results[0]) ? 
              [results[0]].map((datum: any, idx: number) => {
                return (
                  <div
                    className="flex h-full z-20 -mt-80 lg:mt-0 lg:h-screen w-full lg:absolute lg:w-1/4 lg:top-20 lg:left-20 flex-col items-center justify-start gap-4 rounded-2xl border-2 border-white bg-stone-800 p-2 text-white"
                    key={datum.id}
                  >
                    <div className="relative flex w-5/6 md:w-1/2 lg:w-full flex-col items-center justify-start m-4">
                      <img
                        className="aspect-square w-full rounded-2xl object-cover"
                        src={datum.image_url}
                        alt={datum.name}
                      />
                      <div className="absolute bottom-0 right-0 h-3/4  w-full rounded-2xl bg-gradient-to-t from-stone-900"></div>
                      <div className="absolute bottom-0  right-0  flex w-full flex-col justify-start p-4 text-left">
                        <p className="gap-2 align-middle">
                          <b className="text-lg font-bold">{datum.name}</b>
                          &nbsp;&nbsp;
                          <i className="font-light">{datum.price}</i>
                        </p>
                        <p className="">
                          {Math.round((datum.distance / 1609) * 100) / 100}{" "}
                          miles away
                        </p>
                        <p className="">{datum.rating} Stars</p>
                      </div>
                    </div>
                    <button
                      className=""
                      onClick={() =>
                        setResults((p) => p.filter((e) => e.id !== datum.id))
                      }
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        strokeWidth={2}
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                    <p className="w-full h-30 flex-wrap">TEXT TEXT TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT  TEXT TEXT </p>
                  </div>
                )}) :           <button
                className="-mt-40 z-20 h-20 w-full lg:mt-0 lg:absolute lg:w-1/4 lg:top-20 lg:left-20 my-10 rounded-2xl bg-stone-500 p-4 text-white flex items-center justify-center"
                onClick={() => (setToggle(true), setTab(1))}
              >
                Try Again?
              </button>
              }

          <button
          className="my-10 h-10 rounded-2xl bg-stone-500 p-4 text-white flex items-center justify-center"
          onClick={() => (setTab(1), setToggle(true)) }
        >
          Change up your search
        </button>
        <div style={{display: toggle? "block" : "none"}} className="h-full absolute bg-red-800 bg-opacity-50 w-full">

        </div>
        </div>
        
        {/*MDOAL */}
        <div
          style={{ display: toggle ? "block" : "none" }}
          className="absolute top-0 z-20 h-screen w-full bg-stone-50 md:top-20 md:h-3/4 md:w-3/4 md:rounded-2xl"
        >
          {/*WHERE*/}
          {tab == 0 && (
            <div className="relative flex h-full w-full flex-col items-center justify-start text-lg">
              <div className="h-1/2 w-full">
                <Map
                  provider={tiler}
                  defaultCenter={[40.7812, -73.9665]}
                  center={center}
                  zoom={zoom}
                  maxZoom={maxZoom + 3}
                  onClick={handleSelectLocation}
                  onBoundsChanged={({ center, zoom }) => {
                    setZoom(zoom);
                    setCenter(center);
                    setHaveMoved(true);
                  }}
                >
                  <ZoomControl />
                  <Marker
                    width={50}
                    anchor={location}
                    onClick={handleMarkerClick}
                  />
                </Map>
              </div>
              <div className="flex h-1/4 w-full flex-col items-center justify-center gap-4 p-4 py-8">
                <h2 className="w-5/6 text-xl text-black">
                  <b className="italic">Where</b> do you want to eat?
                </h2>
                <DebounceInput
                  className="w-5/6 rounded-2xl border-2 border-black p-2"
                  value={locationQuery}
                  placeholder="Downtown Austin"
                  debounceTimeout={200}
                  onChange={(e) => [
                    setLocationQuery(e.target.value),
                    search(e.target.value, foodQuery),
                  ]}
                />
              </div>
              <button
                className="absolute bottom-5 right-5 h-1/4"
                onClick={() => setTab((p) => p + 1)}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-16 w-16"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </button>
            </div>
          )}
          {/*WHAT*/}
          {tab == 1 && (
            <div className="relative flex h-full w-full flex-col items-center justify-center">
              <div className="z-10 flex h-full w-full flex-col items-center justify-start text-lg">
                <div className="h-1/2 w-full">
                  <FoodIcons setToggle={setToggle} setFoodQuery={setFoodQuery} />
                </div>
                <div className="flex h-1/4 w-full flex-col items-center justify-center gap-4 p-4 py-8">
                  <h2 className="w-5/6 text-xl text-black">
                    <b className="italic">What</b> do you want to eat?
                  </h2>
                  <DebounceInput
                    className="w-5/6 rounded-2xl border-2 border-black p-2"
                    value={foodQuery}
                    placeholder="Pizza"
                    debounceTimeout={200}
                    onChange={(e) => [
                      setFoodQuery(e.target.value),
                      search(locationQuery, e.target.value),
                    ]}
                  />
                </div>
                <button
                  className="absolute bottom-5 left-5 h-1/4"
                  onClick={() => setTab(0)}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-16 w-16"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15 19l-7-7 7-7"
                    />
                  </svg>
                </button>
                <button
                  className="absolute bottom-5 right-5 h-1/4"
                  onClick={() => (setTab(0), setToggle(false))}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-16 w-16"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default Home;
